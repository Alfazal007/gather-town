// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rooms.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addNewRoom = `-- name: AddNewRoom :one
insert into rooms 
    (id, room_name, admin_id)
        values ($1, $2, $3) returning id, room_name, admin_id
`

type AddNewRoomParams struct {
	ID       uuid.UUID
	RoomName string
	AdminID  uuid.NullUUID
}

func (q *Queries) AddNewRoom(ctx context.Context, arg AddNewRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, addNewRoom, arg.ID, arg.RoomName, arg.AdminID)
	var i Room
	err := row.Scan(&i.ID, &i.RoomName, &i.AdminID)
	return i, err
}

const deleteRoomFromId = `-- name: DeleteRoomFromId :one
delete from rooms where id=$1 returning id, room_name, admin_id
`

func (q *Queries) DeleteRoomFromId(ctx context.Context, id uuid.UUID) (Room, error) {
	row := q.db.QueryRowContext(ctx, deleteRoomFromId, id)
	var i Room
	err := row.Scan(&i.ID, &i.RoomName, &i.AdminID)
	return i, err
}

const findExistingRoom = `-- name: FindExistingRoom :one
select room_name, id from rooms
    where room_name=$1 and admin_id=$2 limit 1
`

type FindExistingRoomParams struct {
	RoomName string
	AdminID  uuid.NullUUID
}

type FindExistingRoomRow struct {
	RoomName string
	ID       uuid.UUID
}

func (q *Queries) FindExistingRoom(ctx context.Context, arg FindExistingRoomParams) (FindExistingRoomRow, error) {
	row := q.db.QueryRowContext(ctx, findExistingRoom, arg.RoomName, arg.AdminID)
	var i FindExistingRoomRow
	err := row.Scan(&i.RoomName, &i.ID)
	return i, err
}

const getRoomFromId = `-- name: GetRoomFromId :one
select id, room_name, admin_id from rooms where id=$1 limit 1
`

func (q *Queries) GetRoomFromId(ctx context.Context, id uuid.UUID) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoomFromId, id)
	var i Room
	err := row.Scan(&i.ID, &i.RoomName, &i.AdminID)
	return i, err
}

const getRoomsOfUser = `-- name: GetRoomsOfUser :many
select distinct r.id, r.room_name, r.admin_id
from rooms r
left join room_members rm ON r.id = rm.room_id
where r.admin_id=$1 OR rm.user_id=$1
`

func (q *Queries) GetRoomsOfUser(ctx context.Context, adminID uuid.NullUUID) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, getRoomsOfUser, adminID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(&i.ID, &i.RoomName, &i.AdminID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
