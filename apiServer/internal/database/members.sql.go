// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: members.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addNewRoomMember = `-- name: AddNewRoomMember :one
insert into room_members
    (room_id, user_id)
        values ($1, $2) returning room_id, user_id
`

type AddNewRoomMemberParams struct {
	RoomID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) AddNewRoomMember(ctx context.Context, arg AddNewRoomMemberParams) (RoomMember, error) {
	row := q.db.QueryRowContext(ctx, addNewRoomMember, arg.RoomID, arg.UserID)
	var i RoomMember
	err := row.Scan(&i.RoomID, &i.UserID)
	return i, err
}

const getExistingPerson = `-- name: GetExistingPerson :one
select room_id, user_id from room_members where room_id=$1 and user_id=$2 limit 1
`

type GetExistingPersonParams struct {
	RoomID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetExistingPerson(ctx context.Context, arg GetExistingPersonParams) (RoomMember, error) {
	row := q.db.QueryRowContext(ctx, getExistingPerson, arg.RoomID, arg.UserID)
	var i RoomMember
	err := row.Scan(&i.RoomID, &i.UserID)
	return i, err
}
